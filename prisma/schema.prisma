// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  email            String         @unique
  username         String         @unique
  name             String?
  password         String
  passwordHash     String
  phone            String?
  notifications    Notification[]
  subscription     Subscription?
  accessType       String         @default("user")
  status           String         @default("active")
  totalBalance     String?        @default("0")
  bonusBalance     String?        @default("0")
  annoncements     Annoncement[]
  payments         Payment[]
  favourites       Favourite[]
  testimonials     Testimonial[]
  isVerified       Boolean?
  verificationCode String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type Subscription {
  subsType      String
  subsName      String
  topModifier   Int?
  hurryModifier Int?
}

type Notification {
  type      String
  isOpened  Boolean
  text      String
  createdAt DateTime @default(now())
}

model Annoncement {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user           User      @relation(fields: [userId], references: [id])
  userId         String    @db.ObjectId
  cityOrDistrict String
  cityOrTown     String?
  townOrStreet   String?
  buildingName   Building? @relation(fields: [buildingId], references: [id])
  buildingId     String?   @db.ObjectId
  coordinateX    String?
  coordinateY    String?

  testimonials Testimonial[]
  chats        Chat[]

  isChecked         Boolean  @default(false)
  roomNumber        Int
  floor             Int?
  floorFrom         Int?
  repairType        String?
  roofHeight        String?
  yearBuild         Int?
  priceNego         Boolean?
  description       String
  comeIn            String?
  comeOut           String?
  additionalFilters Filter[]
  areaSq            Int
  price             Int
  images            Image[]
  phase             String   @default("активно")
  phone             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  categoryType        String
  serviceType         String
  serviceTypeExt      String?
  subscriptionDate    DateTime?
  modificators        Modificator?
  companySubscription String?
  stats               Stats?
}

type Filter {
  value String?
}

model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @db.ObjectId
  sum             String   @default("0")
  status          String   @default("pending")
  transactionType String   @default("adding")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Chat {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  annoncement   Annoncement @relation(fields: [annoncementId], references: [id])
  annoncementId String      @db.ObjectId
  user1Id       String
  user2Id       String
  user1Name     String?
  user2Name     String?

  createdAt DateTime  @default(now())
  messages  Message[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  author    String
  text      String?
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

type Modificator {
  topModifier   Int? @default(0)
  hotModifier   Int? @default(0)
  hurryModifier Int? @default(0)
}

type Stats {
  allCount             Int           @default(0)
  allMobileCount       Int?          @default(0)
  lastSevenCount       Int?          @default(0)
  lastSevenCountMobile Int?          @default(0)
  todayCount           Int?          @default(0)
  todayCountMobile     Int?          @default(0)
  graphicData          GraphicData[]
}

type GraphicData {
  name String
  uv   Int?   @default(0)
  pv   Int?   @default(0)
}

type Image {
  url String
}

model Testimonial {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.ObjectId
  annoncement   Annoncement @relation(fields: [annoncementId], references: [id])
  annoncementId String      @db.ObjectId
  ranking       Ranking
  comment       String?
  createdAt     DateTime    @default(now())
}

type Ranking {
  overall  String
  ranking1 String
  ranking2 String
  ranking3 String
  ranking4 String
  ranking5 String
  ranking6 String
}

type Favourite {
  annoncementId String
  text          String
}

model Building {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  buildingYear   String?
  annoncements   Annoncement[]
  type           String?
  name           String
  cityOrDistrict String
  cityOrTown     String?
  townOrStreet   String?
  floors         Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}
