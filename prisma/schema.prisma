// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  username      String         @unique
  name          String?
  password      String
  passwordHash  String
  phone         String?
  notifications Notification[]

  accessType   String        @default("user")
  status       String        @default("active")
  totalBalance String?       @default("0")
  bonusBalance String?       @default("0")
  annoncements Annoncement[]
  payments     Payment[]
  favourites   Favourite[]
  testimonials Testimonial[]
  chats        Chat[]        @relation(fields: [chatIds], references: [id])
  chatIds      String[]      @db.ObjectId

  isVerified       Boolean?
  verificationCode String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type Notification {
  type      String
  isOpened  Boolean
  text      String
  createdAt DateTime @default(now())
}

model Annoncement {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user           User      @relation(fields: [userId], references: [id])
  userId         String    @db.ObjectId
  cityOrDistrict String
  cityOrTown     String?
  townOrStreet   String?
  buildingName   Building? @relation(fields: [buildingId], references: [id])
  buildingId     String?   @db.ObjectId
  coordinateX    String?
  coordinateY    String?

  testimonials Testimonial[]
  chats        Chat[]
  analytics    Analytics[]

  isChecked               Boolean       @default(false)
  fizOrBiz                String?       @default("fiz")
  roomNumber              Int
  floor                   Int?
  floorFrom               Int?
  repairType              String?
  roofHeight              String?
  yearBuild               Int?
  priceNego               Boolean?
  description             String
  comeIn                  String?
  comeOut                 String?
  additionalFilters       Filter[]
  areaSq                  Int
  price                   Int
  images                  Image[]
  phase                   String        @default("активно")
  phone                   String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  subscription            Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId          String?       @db.ObjectId
  categoryType            String
  serviceType             String
  serviceTypeExt          String?
  subscriptionDate        DateTime?
  modificators            Modificator?
  topModifierDate         DateTime?
  hotModifierDate         DateTime?
  hurryModifierDate       DateTime?
  modifierPaidStatus      String?
  topModifierPaidStatus   String?
  hotModifierPaidStatus   String?
  hurryModifierPaidStatus String?
  companySubscription     String?
  stats                   Stats?
  moderatorText           String?
  subsStatus              String?
}

type Filter {
  value String?
}

model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @db.ObjectId
  sum             String   @default("0")
  bonus           String?
  status          String   @default("pending")
  paymentType     String?
  annoncementId   String?
  paymentUrl      String?
  transactionId   String?
  transactionType String   @default("refill")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Chat {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  annoncement   Annoncement? @relation(fields: [annoncementId], references: [id], onDelete: Cascade)
  annoncementId String?      @db.ObjectId
  users         User[]       @relation(fields: [userIds], references: [id])
  userIds       String[]     @db.ObjectId
  toSupport     Boolean?     @default(false)
  createdAt     DateTime     @default(now())
  messages      Message[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String   @db.ObjectId
  author    String
  text      String?
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model Analytics {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  annoncement   Annoncement @relation(fields: [annoncementId], references: [id], onDelete: Cascade)
  annoncementId String      @db.ObjectId
  mobileCount   Int?        @default(0)
  viewCount     Int?        @default(0)
  createdDate   String?
  createdAt     DateTime    @default(now())
}

type Modificator {
  topModifier   Int? @default(0)
  hotModifier   Int? @default(0)
  hurryModifier Int? @default(0)
}

type Stats {
  allCount             Int           @default(0)
  allMobileCount       Int?          @default(0)
  lastSevenCount       Int?          @default(0)
  lastSevenCountMobile Int?          @default(0)
  todayCount           Int?          @default(0)
  todayCountMobile     Int?          @default(0)
  graphicData          GraphicData[]
}

type GraphicData {
  name String
  uv   Int?   @default(0)
  pv   Int?   @default(0)
}

type Image {
  url String
}

model Testimonial {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.ObjectId
  annoncement   Annoncement @relation(fields: [annoncementId], references: [id])
  annoncementId String      @db.ObjectId
  ranking       Ranking
  comment       String?
  createdAt     DateTime    @default(now())
}

type Ranking {
  overall  String
  ranking1 String
  ranking2 String
  ranking3 String
  ranking4 String
  ranking5 String
  ranking6 String
}

type Favourite {
  annoncementId String
  text          String
}

model Building {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  buildingYear   Int?
  annoncements   Annoncement[]
  type           String?
  name           String
  cityOrDistrict String
  cityOrTown     String?
  townOrStreet   String?
  description    String?
  city           City?         @relation(fields: [cityId], references: [id])
  cityId         String?       @db.ObjectId
  images         Image[]
  floors         Int?
  coordinateX    String?
  coordinateY    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Subscription {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  days         Int
  description  String
  price        Int
  color        String        @default("16a34a")
  icon         String        @default("1")
  annoncements Annoncement[]
}

model ModifierType {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  modifier       String?
  modifierDesc   String?
  modifierDays   Int?    @default(1)
  modifierPrice  String? @default("0")
  modifierDays2  Int?
  modifierPrice2 String?
  modifierDays3  Int?
  modifierPrice3 String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Refill {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  total     Int      @default(0)
  bonusPerc Int?
  bonus     Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  cityOrDistrict String
  cityOrTown     Town[]
  buildings      Building[]
}

type Town {
  name      String
  addresses Address[]
}

type Address {
  name String
}
